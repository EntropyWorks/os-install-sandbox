#!/bin/bash
set -eux

root=$(dirname $0)
source $root/openrc

db_pass=stackdb

function install_svc {
  local name=$1
  local remote=$2
  local branch=${3:-master}

  id $name || useradd -G admin -m $name -s /bin/false

  mkdir -p /opt/stack
  for d in /var/log/$name /var/run/$name /etc/$name; do
    mkdir -p $d
    chown -R $name $d
  done

  if [ ! -e /opt/stack/$name ]; then
  #if ! yolk -V $name; then
    #git clone --depth 1 -b master $remote $temp/$name
    git clone -b $branch $remote /opt/stack/$name
    pip install /opt/stack/$name
  fi
}

function create_db {
  local sql="
    drop database if exists $1; -- TODO: remove this
    create database if not exists $1;
    grant all on $1.* to '$2'@'*'         identified by '$3';
    grant all on $1.* to '$2'@'localhost' identified by '$3';
    grant all on $1.* to '$2'@'%'         identified by '$3';
    flush privileges;"
  mysql -uroot -p$db_pass -e "$sql"
}

function install_upstart {
  local name=$1
  local user=$2
  local cmd=$3
  shift; shift; shift
  local args=$*
  cat > /etc/init/$name.conf <<EOF
start on runlevel [2345]
stop on runlevel [016]
setuid $user
respawn
exec start-stop-daemon --start --make-pidfile --pidfile /var/run/$user/$name.pid --exec $cmd -- $args >> /var/log/$user/$name.log 2>&1
EOF
}

function ensure_root {
  if (( EUID != 0 )); then
    echo "You must be root to do this." 1>&2
    exit 1
  fi
}

function install-packages {
  DEBIAN_FRONTEND=noninteractive apt-get install -y $*
}

function install_deps {
  # apt-get update
  echo mysql-server-5.1 mysql-server/root_password password $db_pass | debconf-set-selections
  echo mysql-server-5.1 mysql-server/root_password_again password $db_pass | debconf-set-selections
  install-packages git mysql-server python-novaclient python-pip python-numpy python-lxml python-greenlet python-mysqldb
  os-config-applier --help || pip install -e git+https://github.com/tripleo/os-config-applier.git#egg=os-config-applier
  #yolk || pip install yolk
}

################################

function keystone_install {
  install_svc keystone https://github.com/openstack/keystone.git
  install_upstart keystone keystone /usr/local/bin/keystone-all "--config-dir /etc/keystone"
  mkdir -p /etc/keystone/ssl && chown -R keystone:keystone /etc/keystone/ssl
  create_db keystone keystone $db_pass
}

function keystone_first_start {
  keystone-manage db_sync
  keystone-manage pki_setup
  service keystone restart
}

################################

function glance_install {
  install_svc glance https://github.com/openstack/glance.git
  mkdir -p /var/lib/glance/images && chown -R glance:glance /var/lib/glance/images
  install_upstart glance-api glance /usr/local/bin/glance-api "--debug"
  create_db glance glance $db_pass
}

function glance_first_start {
  glance-manage db_sync
  service glance-api restart
}

################################

function horizon_install {
  install-packages nodejs python-openssl python-dev
  which node || ln -s $(which nodejs) /usr/bin/node
  install_svc horizon https://github.com/openstack/horizon.git
  if [ ! -e /opt/stack/horizon/.venv ]; then python /opt/stack/horizon/tools/install_venv.py; fi
  mkdir -p /opt/stack/horizon/static && chown -R horizon:horizon /opt/stack/horizon/static
  install_upstart horizon horizon /opt/stack/horizon/manage.py "runserver 0.0.0.0:8080"
}

function horizon_first_start {
  service horizon restart
}

################################

function nova_install {
  install-packages rabbitmq-server
  sudo rabbitmqctl change_password guest stackqueue
  install_svc nova https://github.com/tripleo/nova.git baremetal-dev
  grep nova /etc/sudoers || echo "nova ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
  mkdir -p /var/run/nova/keys && chown -R nova /var/run/nova/keys
  install_upstart nova-api         nova /usr/local/bin/nova-api   "--config-dir /etc/nova"
  install_upstart nova-cert        nova /usr/local/bin/nova-cert   "--config-dir /etc/nova"
  install_upstart nova-network     nova /usr/local/bin/nova-network "--config-dir /etc/nova"
  install_upstart nova-scheduler   nova /usr/local/bin/nova-scheduler "--config-dir /etc/nova"
  install_upstart nova-consoleauth nova /usr/local/bin/nova-consoleauth   "--config-dir /etc/nova"
  install_upstart nova-conductor   nova /usr/local/bin/nova-conductor "--config-dir /etc/nova"
  install_upstart nova-baremetal-deploy-helper nova /usr/local/bin/nova-baremetal-deploy-helper "--config-dir /etc/nova"
  create_db nova nova $db_pass
  create_db nova_bm nova $db_pass
}

function nova_first_start {
  nova-manage db sync
  nova-baremetal-manage db sync

  service nova-api restart
  sleep 5
  service nova-cert restart
  service nova-network restart
  service nova-scheduler restart
  service nova-consoleauth restart
  service nova-conductor restart
  service nova-baremetal-deploy-helper restart
}

################################

function install_all {
  install_deps
  keystone_install
  nova_install
  glance_install
  horizon_install
}

function start_all {
  keystone_first_start
  nova_first_start
  glance_first_start
  horizon_first_start
  sleep 3
  $root/keystone_setup

}

function test_all {
  echo '' | nc localhost 5000 || die "keystone not running"

  if [ ! -e $root/cirros.qcow2 ]; then
    curl -L -o $root/cirros.qcow2 "https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img"
  fi

  source $root/adminrc
  glance image-create --name cirros --is-public true --container-format bare --disk-format qcow2 < cirros.qcow2
}

function main {
  ensure_root
  install_all
  os-config-applier --templates $root/templates --metadata $root/init-data.json
  start_all
  test_all
}

main
