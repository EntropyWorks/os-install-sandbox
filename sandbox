#!/bin/bash
set -eux

root=$(dirname $0)
source $root/openrc

db_pass=stackdb

function install_svc {
  local name=$1
  local remote=$2
  local branch=${3:-master}

  if grep "^sudo:" /etc/group; then
    id $name || useradd -G sudo -m $name -s /bin/false
  fi
  if grep "^admin:" /etc/group; then
    id $name || useradd -G admin -m $name -s /bin/false
  fi

  mkdir -p /opt/stack
  for d in /var/log/$name /var/run/$name /etc/$name; do
    mkdir -p $d
    chown -R $name $d
  done

  if [ ! -e /opt/stack/$name ]; then
  #if ! yolk -V $name; then
    #git clone --depth 1 -b master $remote $temp/$name
    git clone -b $branch $remote /opt/stack/$name
    pip install /opt/stack/$name
  fi
}

function create_db {
  local sql="
    drop database if exists $1; -- TODO: remove this
    create database if not exists $1;
    grant all on $1.* to '$2'@'*'         identified by '$3';
    grant all on $1.* to '$2'@'localhost' identified by '$3';
    grant all on $1.* to '$2'@'%'         identified by '$3';
    flush privileges;"
  mysql -uroot -p$db_pass -e "$sql"
}

function install_upstart {
  local name=$1
  local user=$2
  local cmd=$3
  shift; shift; shift
  local args=$*
  cat > /etc/init/$name.conf <<EOF
start on runlevel [2345]
stop on runlevel [016]
chdir /var/run/$user
setuid $user
respawn
exec start-stop-daemon --start --make-pidfile --pidfile /var/run/$user/$name.pid --exec $cmd -- $args >> /var/log/$user/$name.log 2>&1
EOF
}

function ensure_root {
  if (( EUID != 0 )); then
    echo "You must be root to do this." 1>&2
    exit 1
  fi
}

function give_sudo {
  grep $1 /etc/sudoers || echo "$1 ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
}

function install-packages {
  DEBIAN_FRONTEND=noninteractive apt-get install -y $*
}

function install_deps {
  # apt-get update
  echo mysql-server-5.1 mysql-server/root_password password $db_pass | debconf-set-selections
  echo mysql-server-5.1 mysql-server/root_password_again password $db_pass | debconf-set-selections
  install-packages git mysql-server python-dev python-novaclient python-pip python-numpy python-lxml python-greenlet python-mysqldb ccze libxml2-dev libxslt-dev python-zmq
  os-config-applier --help || pip install -e git+https://github.com/tripleo/os-config-applier.git#egg=os-config-applier
  #yolk || pip install yolk
}

################################

function keystone_install {
  install_svc keystone https://github.com/openstack/keystone.git
  install_upstart keystone keystone /usr/local/bin/keystone-all "--config-dir /etc/keystone --log-config /etc/keystone/logging.conf"
  mkdir -p /etc/keystone/ssl && chown -R keystone:keystone /etc/keystone/ssl
  create_db keystone keystone $db_pass
}

function keystone_first_start {
  keystone-manage db_sync
  keystone-manage pki_setup
  service keystone restart
}

################################

function glance_install {
  install_svc glance https://github.com/openstack/glance.git
  mkdir -p /var/lib/glance/images && chown -R glance:glance /var/lib/glance/images
  install_upstart glance-api glance /usr/local/bin/glance-api "--debug"
  install_upstart glance-reg glance /usr/local/bin/glance-registry "--debug"
  create_db glance glance $db_pass
}

function glance_first_start {
  glance-manage db_sync
  service glance-reg restart
  service glance-api restart
}

################################

function cinder_install {
  install-packages lvm2
  install_svc cinder https://github.com/openstack/cinder.git
  give_sudo cinder
  install_upstart cinder-api cinder /usr/local/bin/cinder-api ""
  install_upstart cinder-volume cinder /usr/local/bin/cinder-volume ""
  install_upstart cinder-scheduler cinder /usr/local/bin/cinder-scheduler ""
  create_db cinder cinder $db_pass
}

function cinder_first_start {
  cinder-manage db sync
  service cinder-api restart
  service cinder-volume restart
  service cinder-scheduler restart
}

################################

function horizon_install {
  install-packages nodejs python-openssl python-dev
  which node || ln -s $(which nodejs) /usr/bin/node
  install_svc horizon https://github.com/openstack/horizon.git
  if [ ! -e /opt/stack/horizon/.venv ]; then python /opt/stack/horizon/tools/install_venv.py; fi
  mkdir -p /opt/stack/horizon/static && chown -R horizon:horizon /opt/stack/horizon/static
  install_upstart horizon horizon /opt/stack/horizon/manage.py "runserver 0.0.0.0:8080"
}

function horizon_first_start {
  service horizon restart
}

################################

function nova_install {
  install-packages rabbitmq-server
  sudo rabbitmqctl change_password guest stackqueue
  install_svc nova https://github.com/tripleo/nova.git baremetal-dev
  give_sudo nova
  mkdir -p /var/run/nova/keys && chown -R nova /var/run/nova/keys
  install_upstart nova-api              nova /usr/local/bin/nova-api   "--config-dir /etc/nova"
  install_upstart nova-rpc-zmq-receiver nova /usr/local/bin/nova-rpc-zmq-receiver "--config-dir /etc/nova"
  install_upstart nova-compute          nova /usr/local/bin/nova-compute "--config-dir /etc/nova"
  install_upstart nova-cert             nova /usr/local/bin/nova-cert   "--config-dir /etc/nova"
  install_upstart nova-network          nova /usr/local/bin/nova-network "--config-dir /etc/nova"
  install_upstart nova-scheduler        nova /usr/local/bin/nova-scheduler "--config-dir /etc/nova --debug"
  install_upstart nova-consoleauth      nova /usr/local/bin/nova-consoleauth   "--config-dir /etc/nova"
  install_upstart nova-conductor        nova /usr/local/bin/nova-conductor "--config-dir /etc/nova"
  install_upstart nova-baremetal-deploy-helper nova /usr/local/bin/nova-baremetal-deploy-helper "--config-dir /etc/nova"
  create_db nova nova $db_pass
  create_db nova_bm nova $db_pass
}

function nova_first_start {
  nova-manage db sync
  nova-baremetal-manage db sync

  service nova-api restart
  sleep 5
  service nova-cert restart
  service nova-rpc-zmq-receiver restart
  service nova-compute restart
  service nova-network restart
  service nova-scheduler restart
  service nova-consoleauth restart
  service nova-conductor restart
  service nova-baremetal-deploy-helper restart
}

################################

function install_all {
  install_deps
  keystone_install
  nova_install
  glance_install
  horizon_install
  cinder_install
}

function start_all {
  keystone_first_start
  nova_first_start
  cinder_first_start
  glance_first_start
  horizon_first_start
  sleep 3
  $root/keystone_setup

}

function add_bm_node {
  id=$(nova-baremetal-manage node create --host $1 --cpus $2 --memory_mb $3 --local_gb $4 --pm_address $5 --pm_user $6 --pm_pass $7 --terminal_port 0 --prov_mac $8)
  nova-baremetal-manage interface create --node_id $id --mac_address $8 --datapath_id 0 --port_no 0
}

function test_all {
  echo '' | nc localhost 5000 || die "keystone not running"

  if [ ! -e $root/cirros.qcow2 ]; then
    curl -L -o $root/cirros.qcow2 "https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img"
  fi


  source $root/adminrc
  glance image-create --name cirros --is-public true --container-format bare --disk-format qcow2 < cirros.qcow2

  nova-manage instance_type create --name=x86_bm --cpu=1 --memory=512 --root_gb=0 --ephemeral_gb=0 --flavor=6 --swap=0 --rxtx_factor=1
  nova-manage instance_type set_key --name=x86_bm --key cpu_arch --value x86_64

  nova-manage instance_type create --name=x86_64_bm --cpu=1 --memory=512 --root_gb=0 --ephemeral_gb=0 --flavor=7 --swap=0 --rxtx_factor=1
  nova-manage instance_type set_key --name=x86_64_bm --key cpu_arch --value x86_64

  # TODO: hostnames
  add_bm_node os-all.novalocal 1 4096 20 1.2.3.4 USER PASS 52:54:00:da:b0:55
}

function main {
  ensure_root
  install_all
  os-config-applier --templates $root/templates --metadata $root/init-data.json
  start_all
  test_all
}

main
